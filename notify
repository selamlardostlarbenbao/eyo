local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local TextService = game:GetService("TextService")

local gethui = gethui or function()
    return CoreGui
end
local protectgui = protectgui or (syn and syn.protect_gui) or function() end

local NotifModule = {}

NotifModule.DPIScale = 1
NotifModule.CornerRadius = 4
NotifModule.NotifyTweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
NotifModule.Scheme = {
    BackgroundColor = Color3.fromRGB(15, 15, 15),
    MainColor = Color3.fromRGB(25, 25, 25),
    AccentColor = Color3.fromRGB(125, 85, 255),
    OutlineColor = Color3.fromRGB(40, 40, 40),
    FontColor = Color3.new(1, 1, 1),
    Font = Font.fromEnum(Enum.Font.Code),
    Dark = Color3.new(0, 0, 0),
}

NotifModule.Registry = {}
NotifModule.Notifications = {}

local function New(ClassName, Properties)
    local Instance = Instance.new(ClassName)
    
    for Property, Value in pairs(Properties) do
        if Property == "Parent" then
            continue
        end
        
        if typeof(Value) == "string" and NotifModule.Scheme[Value] then
            Instance[Property] = NotifModule.Scheme[Value]
            if not NotifModule.Registry[Instance] then
                NotifModule.Registry[Instance] = {}
            end
            NotifModule.Registry[Instance][Property] = Value
        elseif typeof(Value) == "function" then
            Instance[Property] = Value()
            if not NotifModule.Registry[Instance] then
                NotifModule.Registry[Instance] = {}
            end
            NotifModule.Registry[Instance][Property] = Value
        else
            Instance[Property] = Value
        end
    end
    
    if Properties.Parent then
        Instance.Parent = Properties.Parent
    end
    
    return Instance
end

local ScreenGui = New("ScreenGui", {
    Name = "NotificationUI",
    DisplayOrder = 999,
    ResetOnSpawn = false,
})

pcall(protectgui, ScreenGui)
pcall(function()
    ScreenGui.Parent = gethui()
end)
if not ScreenGui.Parent then
    ScreenGui.Parent = CoreGui
end

local NotificationArea
local NotificationList

NotificationArea = New("Frame", {
    AnchorPoint = Vector2.new(1, 0),
    BackgroundTransparency = 1,
    Position = UDim2.new(1, -6, 0, 6),
    Size = UDim2.new(0, 300, 1, -6),
    Parent = ScreenGui,
})

NotificationList = New("UIListLayout", {
    HorizontalAlignment = Enum.HorizontalAlignment.Right,
    Padding = UDim.new(0, 6),
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationArea,
})

local function GetTextBounds(Text, Font, Size, Width)
    local Params = Instance.new("GetTextBoundsParams")
    Params.Text = Text
    Params.RichText = true
    Params.Font = Font
    Params.Size = Size
    Params.Width = Width or workspace.CurrentCamera.ViewportSize.X - 32

    local Bounds = TextService:GetTextBoundsAsync(Params)
    return Bounds.X, Bounds.Y
end

local function MakeOutline(Frame, Corner, ZIndex)
    local Holder = New("Frame", {
        BackgroundColor3 = "Dark",
        Position = UDim2.fromOffset(-2, -2),
        Size = UDim2.new(1, 4, 1, 4),
        ZIndex = ZIndex,
        Parent = Frame,
    })

    local Outline = New("Frame", {
        BackgroundColor3 = "OutlineColor",
        Position = UDim2.fromOffset(1, 1),
        Size = UDim2.new(1, -2, 1, -2),
        ZIndex = ZIndex,
        Parent = Holder,
    })

    if Corner and Corner > 0 then
        New("UICorner", {
            CornerRadius = UDim.new(0, Corner + 1),
            Parent = Holder,
        })
        New("UICorner", {
            CornerRadius = UDim.new(0, Corner),
            Parent = Outline,
        })
    end

    return Holder
end

function NotifModule:SetNotifySide(Side)
    if Side:lower() == "left" then
        NotificationArea.AnchorPoint = Vector2.new(0, 0)
        NotificationArea.Position = UDim2.fromOffset(6, 6)
        NotificationList.HorizontalAlignment = Enum.HorizontalAlignment.Left
    else
        NotificationArea.AnchorPoint = Vector2.new(1, 0)
        NotificationArea.Position = UDim2.new(1, -6, 0, 6)
        NotificationList.HorizontalAlignment = Enum.HorizontalAlignment.Right
    end
end

function NotifModule:Notify(Description, Time, Side)
    Description = tostring(Description or "")
    Time = Time or 5
    Side = Side or "Right"
    
    self:SetNotifySide(Side)
    
    local Data = {
        Description = Description,
        Time = Time,
        Destroyed = false,
    }

    local FakeBackground = New("Frame", {
        AutomaticSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1, 0),
        Visible = false,
        Parent = NotificationArea,
    })

    local Background = MakeOutline(FakeBackground, self.CornerRadius, 5)
    Background.AutomaticSize = Enum.AutomaticSize.Y
    Background.Position = Side:lower() == "left" and UDim2.new(-1, -6, 0, -2) or UDim2.new(1, 6, 0, -2)
    Background.Size = UDim2.fromScale(1, 0)

    local Holder = New("Frame", {
        BackgroundColor3 = "MainColor",
        Position = UDim2.fromOffset(2, 2),
        Size = UDim2.new(1, -4, 1, -4),
        Parent = Background,
    })
    
    New("UICorner", {
        CornerRadius = UDim.new(0, self.CornerRadius - 1),
        Parent = Holder,
    })
    
    New("UIListLayout", {
        Padding = UDim.new(0, 4),
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = Holder,
    })
    
    New("UIPadding", {
        PaddingBottom = UDim.new(0, 8),
        PaddingLeft = UDim.new(0, 8),
        PaddingRight = UDim.new(0, 8),
        PaddingTop = UDim.new(0, 8),
        Parent = Holder,
    })

    local Desc = New("TextLabel", {
        BackgroundTransparency = 1,
        Text = Description,
        TextSize = 14,
        Font = Enum.Font.Code,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        Parent = Holder,
    })

    local DescX, DescY = GetTextBounds(
        Desc.Text,
        Desc.FontFace,
        Desc.TextSize,
        NotificationArea.AbsoluteSize.X - 24
    )
    
    Desc.Size = UDim2.fromOffset(math.ceil(DescX), DescY)
    FakeBackground.Size = UDim2.fromOffset(DescX + 24, 0)

    local TimerHolder = New("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 7),
        Parent = Holder,
    })
    
    local TimerBar = New("Frame", {
        BackgroundColor3 = "BackgroundColor",
        BorderColor3 = "OutlineColor",
        BorderSizePixel = 1,
        Position = UDim2.fromOffset(0, 3),
        Size = UDim2.new(1, 0, 0, 2),
        Parent = TimerHolder,
    })
    
    local TimerFill = New("Frame", {
        BackgroundColor3 = "AccentColor",
        Size = UDim2.fromScale(1, 1),
        Parent = TimerBar,
    })

    function Data:Destroy()
        Data.Destroyed = true
        
        TweenService:Create(Background, NotifModule.NotifyTweenInfo, {
            Position = Side:lower() == "left" and UDim2.new(-1, -6, 0, -2) or UDim2.new(1, 6, 0, -2),
        }):Play()
        
        task.delay(NotifModule.NotifyTweenInfo.Time, function()
            NotifModule.Notifications[FakeBackground] = nil
            FakeBackground:Destroy()
        end)
    end

    NotifModule.Notifications[FakeBackground] = Data

    FakeBackground.Visible = true
    TweenService:Create(Background, NotifModule.NotifyTweenInfo, {
        Position = UDim2.fromOffset(-2, -2),
    }):Play()

    task.delay(NotifModule.NotifyTweenInfo.Time, function()
        TweenService:Create(TimerFill, TweenInfo.new(Time, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Size = UDim2.fromScale(0, 1),
        }):Play()
        
        task.wait(Time)
        
        if not Data.Destroyed then
            Data:Destroy()
        end
    end)

    return Data
end

return NotifModule
